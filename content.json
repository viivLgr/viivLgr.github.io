[{"title":"jsonp","date":"2017-05-04T09:06:28.000Z","path":"2017/05/04/jsonp/","text":"参考：轻松搞定JSONP跨域请求 一直没有搞清楚跨域是怎么一回事，这次拿豆瓣的api简单尝试一下。 要理解跨域，先要了解一下“同源策略”。 所谓同源是指，域名，协议，端口相同。简单的说就是基于安全考虑，当前域不能访问其他域的东西。 12345678910111213141516 window.onload = function()&#123; var oBtn = document.getElementById('btn'); oBtn.onclick = function()&#123; var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function()&#123; if(xhr.readyState == 4 &amp;&amp; xhr.status == 200)&#123; console.log(xhr.responseText); &#125; &#125; // No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. xhr.open('get','https://api.douban.com/v2/book/search?q=javascript&amp;count=1',true); xhr.send(); &#125;&#125; 浏览器会报出上面的错误 ，请求资源上不存在“访问控制允许源”标头。 JSONP 是 JSON with padding（填充式 JSON 或参数式 JSON）的简写 我们知道，的src（获取图片），的href（获取css），的src（获取javascript）这三个都不符合同源策略，它们可以跨域获取数据。 这里要介绍的JSONP就是利用的src来实现跨域获取数据的。 实现跨域的原理就是动态生成script标签，然后利用的src不受同源策略约束来跨域获取数据。 123456789101112131415 function handleResponse(response)&#123; console.log(response);&#125;window.onload = function()&#123; var oBtn = document.getElementById('btn'); oBtn.onclick = function()&#123; // 动态生成script标签，将请求路径赋给src，然后放到文档中 var script = document.createElement('script'); script.src = 'https://api.douban.com/v2/book/search?q=javascript&amp;count=1&amp;callback=handleResponse'; document.body.insertBefore(script,document.body.firstChild); &#125;&#125; 使用jquery的封装好的jsonp来实现跨域12345678910111213141516$.ajax(&#123; async: true, url: 'https://api.douban.com/v2/book/search', type: 'GET', dataType: 'jsonp', //返回的数据类型，设置为jsonp方式 jsonp: 'callback', // 指定一个查询参数名称来覆盖默认的jsonp回调参数 callback jsonpCallback: 'handleResponse', // 设置回调函数名 data: &#123; q: 'javascript', count: 1 &#125;, success: function(response,status,xhr)&#123; console.log('状态为：'+status+'状态是：'+xhr.statusText); console.log(response); &#125;&#125;) 使用$.getJSON来实现跨域12345678$.getJSON('https://api.douban.com/v2/book/search?callback=?',&#123; q: 'javascript', count: 1&#125;,function(response,status,xhr)&#123; console.log('状态为：'+status+'状态是：'+xhr.statusText); console.log(response);&#125;)","tags":[{"name":"jquery","slug":"jquery","permalink":"http://viivlgr.github.io/tags/jquery/"}]},{"title":"学习使用markdown语法","date":"2017-03-29T17:57:41.000Z","path":"2017/03/30/learn-markdown/","text":"开启markdown记录之路~ 一级标题二级标题三级标题四级标题五级标题六级标题无序列表 列表1 列表1.1 列表1.2 列表2 列表3 有序列表 列表1 列表1.1 列表1.2 列表2 列表3 引用 记录，成为更好的自己 粗体和斜体这是斜体这是粗体 链接与图片我的博客 分割线这是第一段内容 这是第二段内容 代码高亮123function()&#123; &#125; 制作待办事项TODOlist [x] 已完成项目1 [x] 已完成事项1 [ ] 待办事项2 [ ] 待办项目2 [ ] 待办项目3 流程图123456graph TD A[Christmas] --&gt;B(Go shopping) B --&gt; C&#123;let me think&#125; C --&gt; |One| D[laptop] C --&gt; |Two| E[iphone] C --&gt; |Three| F[Car] 序列图12345sequenceDiagram loop every day Alice -&gt;&gt; John:Hello John,how are you? John--&gt;&gt;Alice:Great! end 甘特图123456789ganttdateFormat YYYY-MM-DDtitle 产品设计表section 初期阶段明确需求:2016-03-01,10dsection 中期阶段跟进开发:2016-03-11,15dsection 后期阶段走查测试:2016-03-20,9d 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234","tags":[{"name":"工具","slug":"工具","permalink":"http://viivlgr.github.io/tags/工具/"}]},{"title":"我的博客终于出生啦~","date":"2017-03-29T16:56:41.000Z","path":"2017/03/30/build-hexo-and-change-theme/","text":"属于viivlgr的博客出生记~ 特别感谢HJM的分享 搭建hexo及替换主题","tags":[{"name":"first commit","slug":"first-commit","permalink":"http://viivlgr.github.io/tags/first-commit/"}]},{"title":"Hello World","date":"2017-03-28T18:08:10.000Z","path":"2017/03/29/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]